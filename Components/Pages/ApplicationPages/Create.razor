@page "/applications/create/{DogID:int}"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@using CanineConnect.StateObjects
@inject State state
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<p>Dog ID: @DogID</p>
<p>Salary: @Application.salary</p>

<h2>Application</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Application" OnValidSubmit="AddApplication" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="salary" class="form-label">salary:</label>
                <InputNumber id="salary" @bind-Value="Application.salary" class="form-control" />
                <ValidationMessage For="() => Application.salary" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="numb_of_animals" class="form-label">numb_of_animals:</label>
                <InputNumber id="numb_of_animals" @bind-Value="Application.numb_of_animals" class="form-control" />
                <ValidationMessage For="() => Application.numb_of_animals" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="dependents" class="form-label">dependents:</label>
                <InputNumber id="dependents" @bind-Value="Application.dependents" class="form-control" />
                <ValidationMessage For="() => Application.dependents" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/applications">Back to List</a>
</div>

@code {


    [SupplyParameterFromForm]
    private Application Application { get; set; } = new();
    [SupplyParameterFromQuery]
    [Parameter]
    public int DogID { get; set; }
    protected override Task OnInitializedAsync()
    {

        

        return base.OnInitializedAsync();
    }


    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddApplication()
    {
        
        using var context = DbFactory.CreateDbContext();
        Application.DogListing = await context.DogListing.Where(e => e.Id == DogID).FirstAsync();
        Application.User = state.ActiveUser;
        Application.Timestamp = DateTime.Now;
        context.Application.Add(Application);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/applications");
    }
}
