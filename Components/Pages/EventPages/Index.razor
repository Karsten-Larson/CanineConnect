@rendermode InteractiveServer
@page "/myeventposts"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CanineConnect.Models
@using CanineConnect.Data
@using CanineConnect.StateObjects
@using Microsoft.EntityFrameworkCore
@implements IAsyncDisposable
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject State state
@using CanineConnect.StateObjects

<PageTitle>Your Posted Events</PageTitle>
<div style="padding: 20px">
    <h1 class="text-success text-center mb-2">Your Posted Events</h1>

    <p>
        <a href="myeventposts/create">Create New</a>
    </p>

    <QuickGrid Class="table" Items="context.Event.Where(e => e.Host.User.Id == state.ActiveUser.Id)">
        <PropertyColumn Property="eventpost => eventpost.Name" />
        <PropertyColumn Property="eventpost => eventpost.Date" />
        <PropertyColumn Property="eventpost => eventpost.Time" />
        <PropertyColumn Property="eventpost => eventpost.Description" />
        <PropertyColumn Property="eventpost => LocationToString(eventpost.LocationId)" Title="Location"/>
        <PropertyColumn Property="eventpost => hostToString(eventpost.HostId)" Title="Host" />

        <TemplateColumn Context="eventpost">
            <a href="@($"myeventposts/edit?id={eventpost.Id}")">Edit</a> |
            <a href="@($"myeventposts/details?id={eventpost.Id}")">Details</a> |
            <a href="@($"myeventposts/delete?id={eventpost.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
</div>
@code {
    private CanineConnectContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    protected string LocationToString(int id)
    {
        var result = from x in context.Address
                     where x.Id == id
                     select x;

        var address = result.First();

        string location = $"{address.Street}, {address.City}, {address.State}, {address.PostalCode} {address.Country}";

        return location;
    }

    protected string hostToString(int id)
    {

        var result = from x in context.Shelter
                     where x.Id == id
                     select x;

        var shelter = result.First();

        string host = shelter.ShelterName;

        return host;
    }

}
