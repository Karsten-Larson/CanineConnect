@rendermode InteractiveServer

@using CanineConnect.Data
@using CanineConnect.Models
@using CanineConnect.StateObjects
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject IDbContextFactory<CanineConnectContext> DbContextFactory
@inject State state

<div class="container">
    <form>
        <div class="card">
            <form class="card-body gap-4">
                <!-- Email input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="email">Email address</label>
                    <input type="email" id="password" class="form-control" @bind="email" @bind:event="oninput" />
                </div>

                <!-- Password input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="password">Password</label>
                    <input type="password" id="password" class="form-control" @bind="password" @bind:event="oninput" />
                </div>

                <!-- Submit button -->
                <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-block mb-4 mx-auto" @onclick="HandleLogin">Sign in</button>
            </form>
        </div>

        <!--Sign in error message-->
        @if (errorMsg != null)
        {
            <div class="alert alert-warning" role="alert">
                @errorMsg
            </div>
        }

        <!-- Register buttons -->
        <div class="text-center mt-4">
            <p>Not a member? <a href="/signup">Register</a></p>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string? Redirect { get; set; }

    string email = "";
    string password = "";

    string? errorMsg;

    async Task HandleLogin()
    {
        Authentication authentication = new Authentication(DbContextFactory);

        try
        {
            state.ActiveUser = await authentication.AuthenticateUser(email, password);
            // state.ActiveShelter = await authentication.AuthenticateShelter(state.ActiveUser);
            errorMsg = null;

            if (Redirect is not null)
            {
                NavigationManager.NavigateTo(Redirect);
            }
        }
        catch (ArgumentException ex)
        {
            errorMsg = ex.Message.ToString();
        }
        catch
        {
            errorMsg = "System Error";
        }
    }
}
