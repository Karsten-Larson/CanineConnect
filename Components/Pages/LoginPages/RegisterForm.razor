@rendermode InteractiveServer

@using CanineConnect.Data
@using CanineConnect.Models
@using CanineConnect.StateObjects
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject IDbContextFactory<CanineConnectContext> DbContextFactory
@inject State state

<div class="container">
    <form>
        <div class="card">
            <form class="card-body">

                <AddressForm EditableAddress="homeAddress" />

                <!-- Email input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="email">Email address</label>
                    <input type="email" id="password" class="form-control" @bind="email" @bind:event="oninput" />
                </div>

                <!-- Password input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="password">Password</label>
                    <input type="text" id="password" class="form-control" @bind="password" @bind:event="oninput" />
                </div>

                <!-- First Name input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="firstname">First Name</label>
                    <input type="text" id="firstname" class="form-control" @bind="firstname" @bind:event="oninput" />
                </div>

                <!-- Last Name input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="lastname">Last Name</label>
                    <input type="text" id="lastname" class="form-control" @bind="lastname" @bind:event="oninput" />
                </div

                <!-- Phone input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="phonenumber">Phone Number</label>
                    <input type="text" id="phonenumber" class="form-control" @bind="phone" @bind:event="oninput" />
                </div>

                <!-- Birthday input -->
                <div data-mdb-input-init class="form-outline mb-4">
                    <label class="form-label" for="birthdate">Birthdate</label>
                    <input type="date" id="birthdate" class="form-control" @bind="birthdate" @bind:event="oninput" />
                </div>

                <!-- Submit button -->
                <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-block mb-4 mx-auto" @onclick="HandleRegister">Register</button>
            </form>
        </div>

        <!--Sign in error message-->
        @if (errorMsg != null)
        {
            <div class="alert alert-warning" role="alert">
                @errorMsg
            </div>
        }

        <!-- Register buttons -->
        <div class="text-center mt-4">
            <p>Already a member? <a href="/login">Login</a></p>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string? Redirect { get; set; } = "/";

    Address homeAddress = new Address
    {
        City = "",
        Street = "",
        State = "",
        PostalCode = "",
        Country = "",
    };

    string email = "";
    string password = "";
    string firstname = "";
    string lastname = "";
    string phone = "";
    DateOnly birthdate = new DateOnly(2000, 1, 1);

    string? errorMsg;

    private async Task HandleRegister()
    {
        Authentication authentication = new Authentication(DbContextFactory);

        email = email.Trim();
        password = password.Trim();
        firstname = firstname.Trim();
        lastname = lastname.Trim();
        phone = phone.Trim();

        try
        {
            ValidateRegister(email, password, firstname, lastname, birthdate, homeAddress, phone);

            await authentication.RegisterUser(email, password, firstname, lastname, birthdate, homeAddress, (phone == "") ? null : phone);
            state.ActiveUser = await authentication.AuthenticateUser(email, password);
            errorMsg = null;

            if (Redirect is not null)
            {
                NavigationManager.NavigateTo(Redirect);
            }
        }
        catch (ArgumentException ex)
        {
            errorMsg = ex.Message.ToString();
        }
        catch (Exception ex)
        {
            // errorMsg = "System Error";
            errorMsg = ex.Message.ToString();
        }
    }

    private void ValidateRegister(string email, string password, string firstname, string lastname, DateOnly birthday, Address homeAddress, string? phone=null)
    {

        IsValidEmail(email);
        IsValidPassword(password);

        if (string.IsNullOrEmpty(firstname)) throw new ArgumentException("Invalid firstname");
        if (string.IsNullOrEmpty(lastname)) throw new ArgumentException("Invalid lastname");

        IsValidAge(birthday);
        IsValidAddress(homeAddress);
    }

    private void IsValidEmail(string email)
    {
        if (email.EndsWith("."))
        {
            throw new ArgumentException("Invalid Email");
        }

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            if (addr.Address != email) throw new Exception();
        } catch
        {
            throw new ArgumentException("Invalid Email");
        }
    }

    private void IsValidPassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password)) throw new ArgumentException("Enter a password.");
        if (password.Length < 8) throw new ArgumentException("Password is too short.");
        if (password.Length > 20) throw new ArgumentException("Password is too long.");
    }

    private void IsValidAge(DateOnly birthday)
    {
        int age = DateOnly.FromDateTime(DateTime.Now).Year - birthday.Year;

        if (age < 0 | age > 100) throw new ArgumentException("Invalid age for a dog.");
        if (age < 18) throw new ArgumentException("Must be 18 or older to register.");
    }

    private void IsValidAddress(Address address)
    {
        if (string.IsNullOrEmpty(address.Street)) throw new ArgumentException("Empty street.");
        if (string.IsNullOrEmpty(address.City)) throw new ArgumentException("Empty city.");
        if (string.IsNullOrEmpty(address.State)) throw new ArgumentException("Empty state.");
        if (string.IsNullOrEmpty(address.Country)) throw new ArgumentException("Empty country.");
        if (string.IsNullOrEmpty(address.PostalCode)) throw new ArgumentException("Empty postal code.");
    }
}
