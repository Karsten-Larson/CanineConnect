@page "/admin/doglistings/create"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>DogListing</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="DogListing" OnValidSubmit="AddDogListing" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="DogListing.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => DogListing.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="sex" class="form-label">Sex:</label> 
                <InputText id="sex" @bind-Value="DogListing.Sex" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => DogListing.Sex" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="weight" class="form-label">Weight:</label> 
                <InputNumber id="weight" @bind-Value="DogListing.Weight" class="form-control" /> 
                <ValidationMessage For="() => DogListing.Weight" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="breed" class="form-label">Breed:</label> 
                <InputText id="breed" @bind-Value="DogListing.Breed" class="form-control" /> 
                <ValidationMessage For="() => DogListing.Breed" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="age" class="form-label">Age:</label> 
                <InputDate id="age" @bind-Value="DogListing.Age" class="form-control" /> 
                <ValidationMessage For="() => DogListing.Age" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="avaliable" class="form-label">Avaliable:</label> 
                <InputCheckbox id="avaliable" @bind-Value="DogListing.Avaliable" class="form-check-input" /> 
                <ValidationMessage For="() => DogListing.Avaliable" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="DogListing.Description" class="form-control" /> 
                <ValidationMessage For="() => DogListing.Description" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="thumbnail">Thumbnail Image:</label>
                <InputFile OnChange="HandleFileChange" accept=".jpg,.png" />
            </div>
            <div class="mb-3">
                <label for="shelterid" class="form-label">ShelterId:</label> 
                <InputNumber id="shelterid" @bind-Value="DogListing.ShelterId" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => DogListing.ShelterId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>

    @if (errorMsg != null)
    {
        <div class="alert alert-warning" role="alert">
            @errorMsg
        </div>
    }
</div>

<div>
    <a href="/admin/doglistings">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private DogListing DogListing { get; set; } = new();

    private string? errorMsg = null;
    bool isLoading = false;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDogListing()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.DogListing.Add(DogListing);
            await context.SaveChangesAsync();
        } catch (Exception ex)
        {
            errorMsg = ex.ToString();
            return;
        }
        NavigationManager.NavigateTo("/admin/doglistings");
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        isLoading = true;
        List<IBrowserFile> loadedFiles = new List<IBrowserFile>();

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                loadedFiles.Add(file);
                // var path = Path.Combine(Environment.WebRootPath, "Images", file.Name);
                ////save file to folder
                // await using FileStream fs = new(path, FileMode.Create);
                // await file.OpenReadStream().CopyToAsync(fs);

                byte[] fileContent = new byte[file.Size];
                var result = await file.OpenReadStream(file.Size).ReadAsync(fileContent, 0, (Int32)file.Size);

                // save the fileContent into database.
                DogListing.ThumbnailImage = fileContent;

                //query the database and get the byte arrary
                //convert the byte arrary to base64 string, and display it in image element.
                // Imagepath = "data:image/png;base64, " + Convert.ToBase64String(fileContent);
                // DogListing.ThumbnailImage = "data:image/png;base64, " + Convert.ToBase64String(fileContent);
            }
            catch (Exception ex)
            {
                errorMsg = ex.Message.ToString();
                // Logger.LogError("File: {Filename} Error: {Error}",
                //     file.Name, ex.Message);
            }
        }
    }
}
